{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nvar centerRule = function centerRule(_ref) {\n  var total = _ref.total,\n      active = _ref.active;\n\n  if (active - 1 <= 0) {\n    return 1;\n  }\n\n  if (active === total) {\n    return active - 3;\n  }\n\n  if (active >= total - 1) {\n    return active - 2;\n  }\n\n  return active - 1;\n};\n\nvar getNumberPages = function getNumberPages(active, total) {\n  if (active <= 3 || active === total) {\n    return 4;\n  }\n\n  return 3;\n};\n\nvar pagination = function pagination() {\n  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref2$totalPages = _ref2.totalPages,\n      totalPages = _ref2$totalPages === void 0 ? 1 : _ref2$totalPages,\n      _ref2$activePage = _ref2.activePage,\n      activePage = _ref2$activePage === void 0 ? 1 : _ref2$activePage;\n\n  if (totalPages <= 5) {\n    return Array.from({\n      length: totalPages\n    }, function (_, i) {\n      return i + 1;\n    });\n  }\n\n  var initialPages = [1].concat(_toConsumableArray(Array.from({\n    length: getNumberPages(activePage, totalPages)\n  }, function (_, i) {\n    return i + centerRule({\n      total: totalPages,\n      active: activePage\n    });\n  })), [totalPages]);\n  var visiblePages = initialPages.filter(function (page, index, array) {\n    return array.indexOf(page) === index;\n  });\n\n  var _visiblePages = visiblePages,\n      _visiblePages2 = _slicedToArray(_visiblePages, 2),\n      firstPage = _visiblePages2[0],\n      secondPage = _visiblePages2[1];\n\n  if (secondPage === firstPage + 2) {\n    visiblePages = [firstPage, firstPage + 1].concat(_toConsumableArray(visiblePages.slice(1)));\n  }\n\n  var _visiblePages3 = visiblePages,\n      penultimatePage = _visiblePages3[visiblePages.length - 2],\n      lastPage = _visiblePages3[visiblePages.length - 1];\n\n  if (penultimatePage === lastPage - 2) {\n    visiblePages = [].concat(_toConsumableArray(visiblePages.slice(0, -1)), [lastPage - 1, lastPage]);\n  }\n\n  var _visiblePages4 = visiblePages;\n\n  var _visiblePages5 = _slicedToArray(_visiblePages4, 2);\n\n  firstPage = _visiblePages5[0];\n  secondPage = _visiblePages5[1];\n\n  if (secondPage > firstPage + 2) {\n    visiblePages = [firstPage, '...'].concat(_toConsumableArray(visiblePages.slice(1)));\n  }\n\n  penultimatePage = visiblePages[visiblePages.length - 2];\n  lastPage = visiblePages[visiblePages.length - 1];\n\n  if (penultimatePage < lastPage - 2) {\n    visiblePages = [].concat(_toConsumableArray(visiblePages.slice(0, -1)), ['...', lastPage]);\n  }\n\n  return visiblePages;\n};\n\nvar _default = pagination;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}