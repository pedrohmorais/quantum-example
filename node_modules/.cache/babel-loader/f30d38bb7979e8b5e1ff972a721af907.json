{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _styledComponents = _interopRequireWildcard(require(\"styled-components\"));\n\nvar _theme = require(\"../shared/theme\");\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar getColors = function getColors(_ref) {\n  var skin = _ref.skin,\n      badgeColor = _ref.theme.components.badge.skins[skin],\n      inverted = _ref.inverted;\n\n  if (inverted) {\n    var _ref2 = [badgeColor.background, badgeColor.text],\n        text = _ref2[0],\n        background = _ref2[1];\n    return (0, _styledComponents.css)([\"background-color:\", \";color:\", \";\"], background, text);\n  }\n\n  return (0, _styledComponents.css)([\"background-color:\", \";color:\", \";\"], badgeColor.background, badgeColor.text);\n};\n\nvar BadgeWrapper = _styledComponents.default.div.withConfig({\n  displayName: \"Badge__BadgeWrapper\",\n  componentId: \"zpdrj8-0\"\n})([\"display:inline-block;\", \"\"], function (props) {\n  return props.originalChildren ? \"position: relative;\" : \"margin-left: 8px; margin-right: 8px;\";\n});\n\nvar StyledBadge = _styledComponents.default.span.withConfig({\n  displayName: \"Badge__StyledBadge\",\n  componentId: \"zpdrj8-1\"\n})([\"border-radius:8px;display:inline-block;font-weight:bold;height:20px;line-height:20px;min-width:20px;text-align:center;box-sizing:border-box;\", \" \", \" \", \"\"], function (_ref3) {\n  var value = _ref3.value,\n      _ref3$theme = _ref3.theme,\n      _ref3$theme$spacing = _ref3$theme.spacing,\n      xxxsmall = _ref3$theme$spacing.xxxsmall,\n      xxsmall = _ref3$theme$spacing.xxsmall,\n      baseFontSize = _ref3$theme.baseFontSize,\n      number = _ref3.number;\n  var padding = !Number.isInteger(value) || number >= 10 ? xxsmall : xxxsmall;\n  return \"\\n      font-size: \".concat(baseFontSize * 0.75, \"px;\\n      padding-left: \").concat(padding, \"px;\\n      padding-right: \").concat(padding, \"px;\\n    \");\n}, function (props) {\n  return props.originalChildren && \"\\n    position: absolute;\\n    right: -10px;\\n    top: -10px;\\n  \";\n}, getColors);\n/** This components is used to display only `Numbers`. If you want to pass a string, use `<Tag />` component instead */\n\n\nvar Badge = function Badge(_ref4) {\n  var children = _ref4.children,\n      number = _ref4.number,\n      skin = _ref4.skin,\n      inverted = _ref4.inverted,\n      theme = _ref4.theme;\n  var value = number > 99 ? '99+' : number;\n  return _react.default.createElement(BadgeWrapper, {\n    value: value,\n    originalChildren: children\n  }, _react.default.createElement(StyledBadge, {\n    skin: skin,\n    inverted: inverted,\n    theme: theme,\n    value: value,\n    originalChildren: children\n  }, value), children);\n};\n\nBadgeWrapper.displayName = 'BadgeWrapper';\nStyledBadge.displayName = 'StyledBadge';\nBadge.displayName = 'Badge';\nBadge.propTypes = {\n  /** Define background and text color */\n  skin: _propTypes.default.oneOf(['primary', 'success', 'error', 'neutral']),\n\n  /** When passed a children to <Badge />, the badge will be displayed at top-right corner of the children. */\n  children: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.node), _propTypes.default.node]),\n\n  /** Number to be displayed inside badge. When number is higher than 99 will be displayed \"99+\" instead of number value */\n  number: _propTypes.default.number,\n\n  /** Swap background and text color */\n  inverted: _propTypes.default.bool,\n  theme: _propTypes.default.shape({\n    baseFontSize: _propTypes.default.number,\n    spacing: _propTypes.default.object,\n    components: _propTypes.default.shape({\n      badge: _propTypes.default.object\n    })\n  })\n};\nBadge.defaultProps = {\n  skin: 'neutral',\n  inverted: false,\n  children: '',\n  number: 0,\n  theme: {\n    baseFontSize: _theme.baseFontSize,\n    spacing: _theme.spacing,\n    components: {\n      badge: _theme.components.badge\n    }\n  }\n};\nvar _default = Badge;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}