{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar msg = {\n  REQUIRED: 'Campo obrigatório',\n  CPF: 'CPF inválido',\n  CEP: 'CEP inválido',\n  DATE: 'Data inválida',\n  EMAIL: 'E-mail inválido',\n  MINLENGTH: function MINLENGTH(min) {\n    return \"M\\xEDnimo de \".concat(min, \" caracteres\");\n  },\n  MAXLENGTH: function MAXLENGTH(max) {\n    return \"Maximo de \".concat(max, \" caracteres\");\n  }\n};\n\nfunction removeNonDigit(str) {\n  return str ? str.replace(/\\D+/g, '') : '';\n}\n\nvar Validations =\n/*#__PURE__*/\nfunction () {\n  function Validations() {\n    _classCallCheck(this, Validations);\n  }\n\n  _createClass(Validations, null, [{\n    key: \"Required\",\n    value: function Required(_ref) {\n      var value = _ref.value;\n      return value ? '' : msg.REQUIRED;\n    }\n  }, {\n    key: \"CPF\",\n    value: function CPF(_ref2) {\n      var value = _ref2.value;\n      var cpf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : removeNonDigit(value);\n      var CPF_SIZE = 11;\n\n      if (!cpf || cpf.length !== CPF_SIZE) {\n        return msg.CPF;\n      }\n\n      for (var i = 0; i < 10; i += 1) {\n        if (cpf === String(i).repeat(CPF_SIZE)) {\n          return msg.CPF;\n        }\n      }\n\n      var validPosition = function validPosition(position) {\n        var sum = 0;\n        var rev;\n\n        for (var _i = 0; _i < position; _i += 1) {\n          sum += Number(cpf.charAt(_i)) * (position + 1 - _i);\n        }\n\n        rev = CPF_SIZE - sum % CPF_SIZE;\n        rev = rev === 10 || rev === CPF_SIZE ? 0 : rev;\n        return rev === Number(cpf.charAt(position));\n      };\n\n      return validPosition(9) && validPosition(10) ? '' : msg.CPF;\n    }\n  }, {\n    key: \"CEP\",\n    value: function CEP(_ref3) {\n      var value = _ref3.value;\n      var filtered = String(removeNonDigit(value));\n      return filtered.length !== 8 ? msg.CEP : '';\n    }\n  }, {\n    key: \"Date\",\n    value: function (_Date) {\n      function Date(_x) {\n        return _Date.apply(this, arguments);\n      }\n\n      Date.toString = function () {\n        return _Date.toString();\n      };\n\n      return Date;\n    }(function (_ref4) {\n      var _ref4$value = _ref4.value,\n          value = _ref4$value === void 0 ? '' : _ref4$value;\n\n      var _value$split = value.split('/'),\n          _value$split2 = _slicedToArray(_value$split, 3),\n          day = _value$split2[0],\n          month = _value$split2[1],\n          year = _value$split2[2];\n\n      var date = new Date(year, month - 1, day);\n      var isValidDate = date.getMonth() + 1 === Number(month);\n      return isValidDate ? '' : msg.DATE;\n    })\n  }, {\n    key: \"MinLength\",\n    value: function MinLength(_ref5) {\n      var _ref5$value = _ref5.value,\n          value = _ref5$value === void 0 ? '' : _ref5$value,\n          minLength = _ref5.minLength;\n\n      if (!!minLength && String(value).length < Number(minLength)) {\n        return msg.MINLENGTH(minLength);\n      }\n\n      return '';\n    }\n  }, {\n    key: \"MaxLength\",\n    value: function MaxLength(_ref6) {\n      var _ref6$value = _ref6.value,\n          value = _ref6$value === void 0 ? '' : _ref6$value,\n          maxLength = _ref6.maxLength;\n\n      if (!!maxLength && String(value).length > Number(maxLength)) {\n        return msg.MAXLENGTH(maxLength);\n      }\n\n      return '';\n    }\n  }, {\n    key: \"Email\",\n    value: function Email(_ref7) {\n      var value = _ref7.value;\n      var pattern = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n      return pattern.test(value) ? '' : msg.EMAIL;\n    }\n  }]);\n\n  return Validations;\n}();\n\nvar _default = Validations;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}