"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _shared = require("../shared");

var _Desktop = _interopRequireDefault(require("./sub-components/Desktop"));

var _Mobile = _interopRequireDefault(require("./sub-components/Mobile"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Wrapper = _styledComponents.default.nav.withConfig({
  displayName: "Pagination__Wrapper",
  componentId: "sc-1lcjvm4-0"
})(["align-items:center;display:flex;justify-content:center;"]);

var Pagination =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Pagination, _React$Component);

  function Pagination(props) {
    var _this;

    _classCallCheck(this, Pagination);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Pagination).call(this, props));

    _this.resize = function () {
      return _this.forceUpdate();
    };

    _this.props = props;
    return _this;
  }

  _createClass(Pagination, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      window.addEventListener('resize', this.resize);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.resize);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          ariaLabel = _this$props.ariaLabel,
          activePage = _this$props.activePage,
          activePageAriaLabel = _this$props.activePageAriaLabel,
          nextButtonText = _this$props.nextButtonText,
          pageAriaLabel = _this$props.pageAriaLabel,
          pageHref = _this$props.pageHref,
          prevButtonText = _this$props.prevButtonText,
          onPageClick = _this$props.onPageClick,
          totalPages = _this$props.totalPages,
          infoFormatter = _this$props.infoFormatter,
          props = _objectWithoutProperties(_this$props, ["ariaLabel", "activePage", "activePageAriaLabel", "nextButtonText", "pageAriaLabel", "pageHref", "prevButtonText", "onPageClick", "totalPages", "infoFormatter"]);

      var handlePageClick = function handlePageClick(page) {
        return function (e) {
          if (!onPageClick) {
            return undefined;
          }

          e.preventDefault();

          if (page <= 0 || page > totalPages) {
            return false;
          }

          return onPageClick(page);
        };
      };

      var handleHref = function handleHref(page) {
        if (!pageHref || onPageClick || page <= 0 || page > totalPages) {
          return undefined;
        }

        return pageHref(page);
      };

      var width = window && window.innerWidth || _shared.BREAKPOINTS.small.width;
      var Component = width > _shared.BREAKPOINTS.small.width ? _Desktop.default : _Mobile.default;
      return _react.default.createElement(Wrapper, _extends({
        "aria-label": ariaLabel
      }, props), _react.default.createElement(Component, {
        activePage: activePage,
        handlePageClick: handlePageClick,
        handleHref: handleHref,
        prevButtonText: prevButtonText,
        nextButtonText: nextButtonText,
        totalPages: totalPages,
        activePageAriaLabel: activePageAriaLabel,
        pageAriaLabel: pageAriaLabel,
        infoFormatter: infoFormatter
      }));
    }
  }]);

  return Pagination;
}(_react.default.Component);

Pagination.propTypes = {
  /** Set the aria-label html attribute to the root element of pagination */
  ariaLabel: _propTypes.default.string,

  /** Set the current page */
  activePage: _propTypes.default.number,

  /** aria-label attribute to active page button. */
  activePageAriaLabel: _propTypes.default.string,

  /** Set the number of pages to be displayed. */
  totalPages: _propTypes.default.number.isRequired,

  /** Set next page button text */
  nextButtonText: _propTypes.default.string,

  /** Page number button aria-label html attribute. */
  pageAriaLabel: _propTypes.default.string,

  /** Set the page anchor element href value. */
  pageHref: _propTypes.default.func,

  /** Set previous page button text. */
  prevButtonText: _propTypes.default.string,

  /** Function to be called when prev, next or page button is clicked, it receives the next page number as an argument. */
  onPageClick: _propTypes.default.func,

  /** When viewport is less than 600px (small breakpoint) the pagination will show the mobile layout, this function can be used to format the current and last page information. */
  infoFormatter: _propTypes.default.func
};
Pagination.defaultProps = {
  ariaLabel: 'pagination',
  activePage: 1,
  activePageAriaLabel: 'Current Page',
  nextButtonText: 'Next',
  pageAriaLabel: 'Page',
  pageHref: undefined,
  prevButtonText: 'Previous',
  onPageClick: undefined,
  infoFormatter: undefined
};
var _default = Pagination;
exports.default = _default;