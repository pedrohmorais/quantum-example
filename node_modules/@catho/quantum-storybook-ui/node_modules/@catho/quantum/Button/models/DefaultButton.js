"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Colors = _interopRequireDefault(require("../../Colors"));

var _ButtonColor2 = _interopRequireDefault(require("./ButtonColor"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var DefaultButton =
/*#__PURE__*/
function (_ButtonColor) {
  _inherits(DefaultButton, _ButtonColor);

  function DefaultButton(_ref) {
    var unselected = _ref.unselected,
        _ref$unselectedBorder = _ref.unselectedBorder,
        unselectedBorder = _ref$unselectedBorder === void 0 ? unselected : _ref$unselectedBorder,
        _ref$unselectedTextCo = _ref.unselectedTextColor,
        unselectedTextColor = _ref$unselectedTextCo === void 0 ? _Colors.default.WHITE : _ref$unselectedTextCo,
        _ref$unselectedShadow = _ref.unselectedShadow,
        unselectedShadow = _ref$unselectedShadow === void 0 ? "0 2px 4px 0 ".concat(_Colors.default.BLACK['200'], ";") : _ref$unselectedShadow,
        selected = _ref.selected,
        selectedBorder = _ref.selectedBorder,
        _ref$selectedTextColo = _ref.selectedTextColor,
        selectedTextColor = _ref$selectedTextColo === void 0 ? unselectedTextColor : _ref$selectedTextColo,
        _ref$selectedShadow = _ref.selectedShadow,
        selectedShadow = _ref$selectedShadow === void 0 ? "0 2px 4px 0 ".concat(_Colors.default.BLACK['700'], ";") : _ref$selectedShadow,
        disabled = _ref.disabled,
        disabledBorder = _ref.disabledBorder,
        _ref$disabledTextColo = _ref.disabledTextColor,
        disabledTextColor = _ref$disabledTextColo === void 0 ? unselectedTextColor : _ref$disabledTextColo,
        _ref$disabledShadow = _ref.disabledShadow,
        disabledShadow = _ref$disabledShadow === void 0 ? unselectedShadow : _ref$disabledShadow,
        focused = _ref.focused,
        focusedBorder = _ref.focusedBorder,
        _ref$focusedTextColor = _ref.focusedTextColor,
        focusedTextColor = _ref$focusedTextColor === void 0 ? unselectedTextColor : _ref$focusedTextColor,
        _ref$focusedShadow = _ref.focusedShadow,
        focusedShadow = _ref$focusedShadow === void 0 ? unselectedShadow : _ref$focusedShadow,
        hovered = _ref.hovered,
        hoveredBorder = _ref.hoveredBorder,
        _ref$hoveredTextColor = _ref.hoveredTextColor,
        hoveredTextColor = _ref$hoveredTextColor === void 0 ? unselectedTextColor : _ref$hoveredTextColor,
        _ref$hoveredShadow = _ref.hoveredShadow,
        hoveredShadow = _ref$hoveredShadow === void 0 ? unselectedShadow : _ref$hoveredShadow,
        decoration = _ref.decoration,
        borderRadius = _ref.borderRadius;

    _classCallCheck(this, DefaultButton);

    return _possibleConstructorReturn(this, _getPrototypeOf(DefaultButton).call(this, {
      // Unselected
      unselected: unselected,
      unselectedBorder: unselectedBorder,
      unselectedTextColor: unselectedTextColor,
      unselectedShadow: unselectedShadow,
      // Selected
      selected: selected,
      selectedBorder: selectedBorder,
      selectedTextColor: selectedTextColor,
      selectedShadow: selectedShadow,
      // Disabled
      disabled: disabled,
      disabledBorder: disabledBorder,
      disabledTextColor: disabledTextColor,
      disabledShadow: disabledShadow,
      // Focused
      focused: focused,
      focusedBorder: focusedBorder,
      focusedTextColor: focusedTextColor,
      focusedShadow: focusedShadow,
      // Hovered
      hovered: hovered,
      hoveredBorder: hoveredBorder,
      hoveredTextColor: hoveredTextColor,
      hoveredShadow: hoveredShadow,
      // Misc
      decoration: decoration,
      borderRadius: borderRadius
    }));
  }

  return DefaultButton;
}(_ButtonColor2.default);

var _default = DefaultButton;
exports.default = _default;