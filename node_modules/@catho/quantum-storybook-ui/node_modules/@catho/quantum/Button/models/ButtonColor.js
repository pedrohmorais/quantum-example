"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _theme = _interopRequireDefault(require("../../shared/theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ButtonColor =
/*#__PURE__*/
function () {
  function ButtonColor(_ref) {
    var unselected = _ref.unselected,
        _ref$unselectedBorder = _ref.unselectedBorder,
        unselectedBorder = _ref$unselectedBorder === void 0 ? unselected : _ref$unselectedBorder,
        unselectedTextColor = _ref.unselectedTextColor,
        unselectedShadow = _ref.unselectedShadow,
        selected = _ref.selected,
        _ref$selectedBorder = _ref.selectedBorder,
        selectedBorder = _ref$selectedBorder === void 0 ? selected : _ref$selectedBorder,
        selectedTextColor = _ref.selectedTextColor,
        _ref$selectedShadow = _ref.selectedShadow,
        selectedShadow = _ref$selectedShadow === void 0 ? unselectedShadow : _ref$selectedShadow,
        disabled = _ref.disabled,
        _ref$disabledBorder = _ref.disabledBorder,
        disabledBorder = _ref$disabledBorder === void 0 ? disabled : _ref$disabledBorder,
        disabledTextColor = _ref.disabledTextColor,
        _ref$disabledShadow = _ref.disabledShadow,
        disabledShadow = _ref$disabledShadow === void 0 ? unselectedShadow : _ref$disabledShadow,
        focused = _ref.focused,
        _ref$focusedBorder = _ref.focusedBorder,
        focusedBorder = _ref$focusedBorder === void 0 ? focused : _ref$focusedBorder,
        focusedTextColor = _ref.focusedTextColor,
        _ref$focusedShadow = _ref.focusedShadow,
        focusedShadow = _ref$focusedShadow === void 0 ? unselectedShadow : _ref$focusedShadow,
        hovered = _ref.hovered,
        _ref$hoveredBorder = _ref.hoveredBorder,
        hoveredBorder = _ref$hoveredBorder === void 0 ? hovered : _ref$hoveredBorder,
        hoveredTextColor = _ref.hoveredTextColor,
        _ref$hoveredShadow = _ref.hoveredShadow,
        hoveredShadow = _ref$hoveredShadow === void 0 ? unselectedShadow : _ref$hoveredShadow,
        _ref$decoration = _ref.decoration,
        decoration = _ref$decoration === void 0 ? 'none' : _ref$decoration,
        _ref$borderRadius = _ref.borderRadius,
        borderRadius = _ref$borderRadius === void 0 ? _theme.default.sizes.radius : _ref$borderRadius;

    _classCallCheck(this, ButtonColor);

    // Unselected
    this._unselected = unselected;
    this._unselectedBorder = unselectedBorder;
    this._unselectedTextColor = unselectedTextColor;
    this._unselectedShadow = unselectedShadow; // Selected

    this._selected = selected;
    this._selectedBorder = selectedBorder;
    this._selectedTextColor = selectedTextColor;
    this._selectedShadow = selectedShadow; // Disabled

    this._disabled = disabled;
    this._disabledBorder = disabledBorder;
    this._disabledTextColor = disabledTextColor;
    this._disabledShadow = disabledShadow; // Focused

    this._focused = focused;
    this._focusedBorder = focusedBorder;
    this._focusedTextColor = focusedTextColor;
    this._focusedShadow = focusedShadow; // Hovered

    this._hovered = hovered;
    this._hoveredBorder = hoveredBorder;
    this._hoveredTextColor = hoveredTextColor;
    this._hoveredShadow = hoveredShadow; // Misc

    this._decoration = decoration;
    this._borderRadius = borderRadius;
  }

  _createClass(ButtonColor, [{
    key: "unselected",
    get: function get() {
      return {
        background: this._unselected,
        border: this._unselectedBorder,
        color: this._unselectedTextColor,
        shadow: this._unselectedShadow
      };
    }
  }, {
    key: "selected",
    get: function get() {
      return {
        background: this._selected,
        border: this._selectedBorder,
        color: this._selectedTextColor,
        shadow: this._selectedShadow
      };
    }
  }, {
    key: "disabled",
    get: function get() {
      return {
        background: this._disabled,
        border: this._disabledBorder,
        color: this._disabledTextColor,
        shadow: this._disabledShadow
      };
    }
  }, {
    key: "focused",
    get: function get() {
      return {
        background: this._focused,
        border: this._focusedBorder,
        color: this._focusedTextColor,
        shadow: this._focusedShadow
      };
    }
  }, {
    key: "hovered",
    get: function get() {
      return {
        background: this._hovered,
        border: this._hoveredBorder,
        color: this._hoveredTextColor,
        shadow: this._hoveredShadow
      };
    }
  }, {
    key: "decoration",
    get: function get() {
      return this._decoration;
    }
  }, {
    key: "borderRadius",
    get: function get() {
      return this._borderRadius;
    }
  }]);

  return ButtonColor;
}();

var _default = ButtonColor;
exports.default = _default;