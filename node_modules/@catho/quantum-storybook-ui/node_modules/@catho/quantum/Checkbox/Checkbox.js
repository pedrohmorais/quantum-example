"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _shared = require("../shared");

var _HiddenInput = _interopRequireDefault(require("../shared/HiddenInput"));

var _Colors = _interopRequireDefault(require("../Colors"));

var _Icon = _interopRequireDefault(require("../Icon"));

var _CheckboxGroupContext = _interopRequireDefault(require("./CheckboxGroupContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var CHECKBOX_SIZE = '18px';

var Wrapper = _styledComponents.default.div.withConfig({
  displayName: "Checkbox__Wrapper",
  componentId: "sc-1ca5whm-0"
})([""]);

var CheckboxWrapper = _styledComponents.default.div.withConfig({
  displayName: "Checkbox__CheckboxWrapper",
  componentId: "sc-1ca5whm-1"
})(["display:flex;position:relative;"]);

var CheckboxLabel = (0, _styledComponents.default)(_shared.Label).withConfig({
  displayName: "Checkbox__CheckboxLabel",
  componentId: "sc-1ca5whm-2"
})(["color:", ";font-size:16px;margin:0 0 0 10px;"], _Colors.default.BLACK['700']);
CheckboxLabel.displayName = 'CheckboxLabel';
var CheckIcon = (0, _styledComponents.default)(_Icon.default).attrs({
  name: 'check'
}).withConfig({
  displayName: "Checkbox__CheckIcon",
  componentId: "sc-1ca5whm-3"
})([""]);
var HiddenCheckbox = (0, _styledComponents.default)(_HiddenInput.default).attrs({
  type: 'checkbox'
}).withConfig({
  displayName: "Checkbox__HiddenCheckbox",
  componentId: "sc-1ca5whm-4"
})(["cursor:pointer;height:100%;width:100%;+ ", "{align-items:center;background-color:", ";border-radius:2px;border:2px solid ", ";box-sizing:border-box;color:transparent;display:flex;font-size:16px;font-weight:bold;height:", ";justify-content:center;margin-top:2px;transition:all 0.2s ease-in-out;width:", ";}:checked{+ ", "{background-color:", ";border-width:0;color:", ";}}:hover + ", ",:focus + ", "{border-color:", ";box-shadow:0 2px 6px 0 ", ";}", " &[disabled]{cursor:not-allowed;~ ", "{color:", ";}+ ", "{border-color:", ";background-color:", ";}:checked + ", "{background-color:", ";}:hover + ", "{box-shadow:none;}}"], CheckIcon, _Colors.default.WHITE, _Colors.default.BLACK['400'], CHECKBOX_SIZE, CHECKBOX_SIZE, CheckIcon, _Colors.default.BLUE['500'], _Colors.default.WHITE, CheckIcon, CheckIcon, _Colors.default.BLUE['500'], _Colors.default.BLUE['50'], function (_ref) {
  var error = _ref.error;
  return error && "\n    + ".concat(CheckIcon, " {\n      border-color: ").concat(_Colors.default.ERROR['500'], ";\n    }\n\n    :checked + ").concat(CheckIcon, " {\n      background-color: ").concat(_Colors.default.ERROR['500'], ";\n    }\n\n    :hover +  ").concat(CheckIcon, ", :focus +  ").concat(CheckIcon, " {\n      border-color: ").concat(_Colors.default.ERROR['500'], ";\n      box-shadow: 0 2px 6px 0 ").concat(_Colors.default.ERROR['500'], ";\n    }\n  ");
}, CheckboxLabel, _Colors.default.BLACK['400'], CheckIcon, _Colors.default.BLACK['400'], _Colors.default.BLACK['200'], CheckIcon, _Colors.default.BLACK['400'], CheckIcon);
HiddenCheckbox.displayName = 'HiddenCheckbox';

var Checkbox = function Checkbox(_ref2) {
  var children = _ref2.children,
      id = _ref2.id,
      label = _ref2.label,
      value = _ref2.value,
      errorProp = _ref2.error,
      onChangeProp = _ref2.onChange,
      props = _objectWithoutProperties(_ref2, ["children", "id", "label", "value", "error", "onChange"]);

  var context = (0, _react.useContext)(_CheckboxGroupContext.default);
  var errorContext = context.error;
  var _context$error = context.error,
      error = _context$error === void 0 ? errorProp : _context$error,
      _context$onChange = context.onChange,
      onChange = _context$onChange === void 0 ? onChangeProp : _context$onChange;
  return _react.default.createElement(Wrapper, null, _react.default.createElement(CheckboxWrapper, null, _react.default.createElement(HiddenCheckbox, _extends({}, props, {
    id: id,
    error: error,
    value: value,
    onChange: onChange
  })), _react.default.createElement(CheckIcon, null), _react.default.createElement(CheckboxLabel, {
    htmlFor: id
  }, children || label || value)), error && !errorContext && _react.default.createElement(_shared.ErrorMessage, null, error));
};

Checkbox.defaultProps = {
  checked: false,
  disabled: false,
  children: '',
  error: '',
  id: '',
  label: '',
  value: '',
  onChange: function onChange() {}
};
Checkbox.propTypes = {
  checked: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  children: _propTypes.default.string,
  error: _propTypes.default.string,
  id: _propTypes.default.string,
  label: _propTypes.default.string,
  name: _propTypes.default.string.isRequired,
  value: _propTypes.default.string,
  onChange: _propTypes.default.func
};
Checkbox.displayName = 'Checkbox';
var _default = Checkbox;
exports.default = _default;