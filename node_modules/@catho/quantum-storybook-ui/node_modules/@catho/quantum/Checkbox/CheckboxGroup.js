"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _shared = require("../shared");

var _Checkbox = _interopRequireDefault(require("./Checkbox"));

var _CheckboxButton = _interopRequireDefault(require("./CheckboxButton"));

var _CheckboxGroupContext = _interopRequireDefault(require("./CheckboxGroupContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Group = (0, _styledComponents.default)(_shared.FieldGroup).withConfig({
  displayName: "CheckboxGroup__Group",
  componentId: "sc-1da60j6-0"
})(["position:relative;"]);
var ErrorLabel = (0, _styledComponents.default)(_shared.ErrorMessage).withConfig({
  displayName: "CheckboxGroup__ErrorLabel",
  componentId: "sc-1da60j6-1"
})(["margin-left:-3px;"]);
ErrorLabel.displayName = 'ErrorLabel';

var CheckboxGroup =
/*#__PURE__*/
function (_React$Component) {
  _inherits(CheckboxGroup, _React$Component);

  function CheckboxGroup() {
    var _getPrototypeOf2;

    var _temp, _this;

    _classCallCheck(this, CheckboxGroup);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _possibleConstructorReturn(_this, (_temp = _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CheckboxGroup)).call.apply(_getPrototypeOf2, [this].concat(args))), _this._onChange = function (event) {
      var _event$target = event.target,
          checked = _event$target.checked,
          name = _event$target.name;
      var _this$props = _this.props,
          onChange = _this$props.onChange,
          children = _this$props.children,
          options = _this$props.options;
      var items = _react.default.Children.map(children, function (_ref) {
        var props = _ref.props;
        return props;
      }) || options;
      onChange(items.map(function (item) {
        return item.name === name ? _objectSpread({}, item, {
          checked: checked
        }) : item;
      }), event);
    }, _temp));
  }

  _createClass(CheckboxGroup, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          children = _this$props2.children,
          error = _this$props2.error,
          options = _this$props2.options,
          type = _this$props2.type,
          inline = _this$props2.inline;
      var ItemType = type === 'checkbox' ? _Checkbox.default : _CheckboxButton.default;
      var checkboxes = children || options.map(function (option) {
        return _react.default.createElement(ItemType, _extends({}, option, {
          key: option.name
        }));
      });
      return _react.default.createElement(Group, null, _react.default.createElement(_CheckboxGroupContext.default.Provider, {
        value: {
          error: Boolean(error),
          onChange: this._onChange,
          inline: inline
        }
      }, checkboxes), error && _react.default.createElement(ErrorLabel, null, error));
    }
  }]);

  return CheckboxGroup;
}(_react.default.Component);

CheckboxGroup.Checkbox = _Checkbox.default;
CheckboxGroup.Button = _CheckboxButton.default;
/**
 * Group for Checkbox components.
 */

CheckboxGroup.defaultProps = {
  children: undefined,
  error: undefined,
  inline: false,
  onChange: function onChange() {},
  options: [],
  type: 'checkbox'
};
CheckboxGroup.propTypes = {
  children: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.element), _propTypes.default.element]),
  error: _propTypes.default.string,
  inline: _propTypes.default.bool,

  /** It captures group changes. Signature: onChange(list: Array, event: SynteticEvent) */
  onChange: _propTypes.default.func,
  options: _propTypes.default.arrayOf(_propTypes.default.shape({
    checked: _propTypes.default.bool,
    disabled: _propTypes.default.bool,
    label: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]),
    name: _propTypes.default.string.isRequired,
    value: _propTypes.default.string
  })),
  type: _propTypes.default.oneOf(['checkbox', 'button'])
};
var _default = CheckboxGroup;
exports.default = _default;