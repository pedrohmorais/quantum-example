"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var centerRule = function centerRule(_ref) {
  var total = _ref.total,
      active = _ref.active;

  if (active - 1 <= 0) {
    return 1;
  }

  if (active === total) {
    return active - 3;
  }

  if (active >= total - 1) {
    return active - 2;
  }

  return active - 1;
};

var getNumberPages = function getNumberPages(active, total) {
  if (active <= 3 || active === total) {
    return 4;
  }

  return 3;
};

var pagination = function pagination() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref2$totalPages = _ref2.totalPages,
      totalPages = _ref2$totalPages === void 0 ? 1 : _ref2$totalPages,
      _ref2$activePage = _ref2.activePage,
      activePage = _ref2$activePage === void 0 ? 1 : _ref2$activePage;

  if (totalPages <= 5) {
    return Array.from({
      length: totalPages
    }, function (_, i) {
      return i + 1;
    });
  }

  var initialPages = [1].concat(_toConsumableArray(Array.from({
    length: getNumberPages(activePage, totalPages)
  }, function (_, i) {
    return i + centerRule({
      total: totalPages,
      active: activePage
    });
  })), [totalPages]);
  var visiblePages = initialPages.filter(function (page, index, array) {
    return array.indexOf(page) === index;
  });

  var _visiblePages = visiblePages,
      _visiblePages2 = _slicedToArray(_visiblePages, 2),
      firstPage = _visiblePages2[0],
      secondPage = _visiblePages2[1];

  if (secondPage === firstPage + 2) {
    visiblePages = [firstPage, firstPage + 1].concat(_toConsumableArray(visiblePages.slice(1)));
  }

  var _visiblePages3 = visiblePages,
      penultimatePage = _visiblePages3[visiblePages.length - 2],
      lastPage = _visiblePages3[visiblePages.length - 1];

  if (penultimatePage === lastPage - 2) {
    visiblePages = [].concat(_toConsumableArray(visiblePages.slice(0, -1)), [lastPage - 1, lastPage]);
  }

  var _visiblePages4 = visiblePages;

  var _visiblePages5 = _slicedToArray(_visiblePages4, 2);

  firstPage = _visiblePages5[0];
  secondPage = _visiblePages5[1];

  if (secondPage > firstPage + 2) {
    visiblePages = [firstPage, '...'].concat(_toConsumableArray(visiblePages.slice(1)));
  }

  penultimatePage = visiblePages[visiblePages.length - 2];
  lastPage = visiblePages[visiblePages.length - 1];

  if (penultimatePage < lastPage - 2) {
    visiblePages = [].concat(_toConsumableArray(visiblePages.slice(0, -1)), ['...', lastPage]);
  }

  return visiblePages;
};

var _default = pagination;
exports.default = _default;