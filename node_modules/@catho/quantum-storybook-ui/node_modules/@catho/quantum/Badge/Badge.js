"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _Colors = _interopRequireDefault(require("../Colors"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getColors = function getColors(_ref) {
  var skin = _ref.skin;
  var badgeColors = {
    default: {
      background: _Colors.default.BLACK[100],
      text: _Colors.default.BLACK[700]
    },
    black: {
      background: _Colors.default.BLACK[700],
      text: _Colors.default.WHITE
    },
    blue: {
      background: _Colors.default.BLUE[500],
      text: _Colors.default.WHITE
    },
    white: {
      background: _Colors.default.WHITE,
      text: '#000'
    },
    error: {
      background: _Colors.default.ERROR[500],
      text: _Colors.default.WHITE
    },
    success: {
      background: _Colors.default.SUCCESS[200],
      text: _Colors.default.SUCCESS[900]
    }
  };
  return (0, _styledComponents.css)(["background-color:", ";color:", ";", ""], badgeColors[skin].background, badgeColors[skin].text, skin === 'white' && 'mix-blend-mode: lighten;');
};

var BadgeWrapper = _styledComponents.default.div.withConfig({
  displayName: "Badge__BadgeWrapper",
  componentId: "zpdrj8-0"
})(["display:inline-block;", ""], function (props) {
  return props.originalChildren ? "position: relative;" : "margin-left: 8px; margin-right: 8px;";
});

var StyledBadge = _styledComponents.default.span.withConfig({
  displayName: "Badge__StyledBadge",
  componentId: "zpdrj8-1"
})(["border-radius:8px;display:inline-block;font-size:12px;font-weight:bold;height:20px;line-height:20px;min-width:20px;text-align:center;padding-left:2px;padding-right:2px;", " ", " ", ""], function (props) {
  return !Number.isInteger(props.value) && "\n    padding-left: 4px;\n    padding-right: 4px;\n  ";
}, function (props) {
  return props.originalChildren && "\n    position: absolute;\n    right: -10px;\n    top: -10px;\n  ";
}, getColors);
/** This components is used to display only `Numbers`. If you want to pass a string, use `<Tag />` component instead */


var Badge = function Badge(_ref2) {
  var children = _ref2.children,
      number = _ref2.number,
      skin = _ref2.skin;
  var value = number > 99 ? '99+' : number;
  return _react.default.createElement(BadgeWrapper, {
    value: value,
    originalChildren: children
  }, _react.default.createElement(StyledBadge, {
    skin: skin,
    value: value,
    originalChildren: children
  }, value), children);
};

BadgeWrapper.displayName = 'BadgeWrapper';
StyledBadge.displayName = 'StyledBadge';
Badge.displayName = 'Badge';
Badge.propTypes = {
  /** Define background and text color */
  skin: _propTypes.default.oneOf(['default', 'black', 'blue', 'white', 'error', 'success']),

  /** When passed a children to <Badge />, the badge will be displayed at top-right corner of the children. */
  children: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.node), _propTypes.default.node]),

  /** Number to be displayed inside badge. When number is higher than 99 will be displayed "99+" instead of number value */
  number: _propTypes.default.number
};
Badge.defaultProps = {
  skin: 'default',
  children: '',
  number: 0
};
var _default = Badge;
exports.default = _default;