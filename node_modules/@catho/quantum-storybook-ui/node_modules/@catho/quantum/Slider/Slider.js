"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _rcSlider = _interopRequireDefault(require("rc-slider"));

require("rc-slider/assets/index.css");

var _Colors = _interopRequireDefault(require("../Colors"));

var _Tooltip = _interopRequireDefault(require("../Tooltip"));

var _valueValidator = _interopRequireDefault(require("./valueValidator"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var sliderStyle = {
  handleStyle: {
    borderWidth: 0,
    height: 20,
    marginLeft: -9,
    marginTop: -6,
    width: 20
  },
  marksStyle: {
    common: {
      fontSize: 16,
      marginLeft: 0,
      width: 'auto'
    },
    max: {
      left: 'unset',
      right: 0
    },
    min: {
      left: 0
    }
  },
  railStyle: {
    height: 8
  },
  trackStyle: {
    height: 8
  }
};

var tipPosition = function tipPosition(_ref) {
  var value = _ref.value,
      min = _ref.min,
      max = _ref.max;
  var half = value;

  if (_typeof(value) === 'object') {
    var from = value.from,
        to = value.to;
    half = (to + from) / 2;
  }

  return (half - min) / (max - min) * 100;
};

var customStyle = (0, _styledComponents.css)([".rc-slider-handle{background-color:", ";}.rc-slider-rail{background-color:", ";}.rc-slider-track{background-color:", ";}.rc-slider-handle:active,.rc-slider-handle:focus{border:none;box-shadow:0 2px 6px 0 ", ";}&.rc-slider-disabled{background:none;.rc-slider-handle{background-color:", ";}.rc-slider-rail{background-color:", ";}.rc-slider-track{background-color:", ";}}"], _Colors.default.BLUE[500], _Colors.default.BLUE[200], _Colors.default.BLUE[50], _Colors.default.BLUE[50], _Colors.default.BLACK[400], _Colors.default.BLACK[100], _Colors.default.BLACK[200]);
var StyledSlider = (0, _styledComponents.default)(_rcSlider.default).withConfig({
  displayName: "Slider__StyledSlider",
  componentId: "sc-1xvfbkj-0"
})(["", ""], customStyle);
var StyledRange = (0, _styledComponents.default)(_rcSlider.default.Range).withConfig({
  displayName: "Slider__StyledRange",
  componentId: "sc-1xvfbkj-1"
})(["", ""], customStyle);
var StyledTooltip = (0, _styledComponents.default)(_Tooltip.default).withConfig({
  displayName: "Slider__StyledTooltip",
  componentId: "sc-1xvfbkj-2"
})(["width:100%;> div:first-child{left:", "%;top:-41px;}"], tipPosition);

var Slider =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Slider, _React$Component);

  function Slider(props) {
    var _this;

    _classCallCheck(this, Slider);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Slider).call(this, props));

    _this.handleChange = function (value) {
      var onChange = _this.props.onChange;

      if (Array.isArray(value)) {
        var _value = _slicedToArray(value, 2),
            from = _value[0],
            to = _value[1];

        onChange({
          from: from,
          to: to
        });
      } else {
        onChange(value);
      }
    };

    _this.handleMouseDown = function () {
      _this.setState({
        visible: true
      });
    };

    _this.handleMouseUp = function () {
      _this.setState({
        visible: false
      });
    };

    _this.state = {
      visible: null
    };
    return _this;
  }

  _createClass(Slider, [{
    key: "render",
    value: function render() {
      var _marks;

      var handleChange = this.handleChange,
          handleMouseDown = this.handleMouseDown,
          handleMouseUp = this.handleMouseUp,
          props = this.props,
          visible = this.state.visible;
      var value = props.value,
          tipFormatter = props.tipFormatter,
          minMaxFormatter = props.minMaxFormatter,
          min = props.min,
          max = props.max;
      var from = value.from,
          to = value.to;
      var handleStyle = sliderStyle.handleStyle,
          trackStyle = sliderStyle.trackStyle,
          marksStyle = sliderStyle.marksStyle,
          railStyle = sliderStyle.railStyle;
      var marks = (_marks = {}, _defineProperty(_marks, min, {
        style: _objectSpread({}, marksStyle.common, marksStyle.min),
        label: minMaxFormatter(min)
      }), _defineProperty(_marks, max, {
        style: _objectSpread({}, marksStyle.common, marksStyle.max),
        label: minMaxFormatter(max)
      }), _marks);
      return _react.default.createElement(StyledTooltip, _extends({}, props, {
        text: String(tipFormatter(value)),
        value: value,
        visible: visible
      }), _typeof(value) === 'object' ? _react.default.createElement(StyledRange, _extends({}, props, {
        allowCross: false,
        dotStyle: {
          display: 'none'
        },
        handleStyle: [handleStyle, handleStyle],
        max: max,
        min: min,
        marks: marks,
        pushable: true,
        onChange: handleChange,
        onBeforeChange: handleMouseDown,
        onAfterChange: handleMouseUp,
        railStyle: railStyle,
        trackStyle: [trackStyle, trackStyle],
        value: [from, to]
      })) : _react.default.createElement(StyledSlider, _extends({}, props, {
        dotStyle: {
          display: 'none'
        },
        handleStyle: handleStyle,
        max: max,
        marks: marks,
        min: min,
        onChange: handleChange,
        onBeforeChange: handleMouseDown,
        onAfterChange: handleMouseUp,
        railStyle: railStyle,
        trackStyle: trackStyle,
        value: value
      })));
    }
  }]);

  return Slider;
}(_react.default.Component);

StyledRange.displayName = 'RcRange';
StyledSlider.displayName = 'RcSlider';
Slider.defaultProps = {
  max: 100,
  min: 0,
  value: 50,
  disabled: false,
  onChange: function onChange() {},
  tipFormatter: function tipFormatter(value) {
    return _typeof(value) === 'object' ? "".concat(value.from, " to ").concat(value.to) : value;
  },
  minMaxFormatter: function minMaxFormatter(value) {
    return value;
  }
};
Slider.propTypes = {
  max: _propTypes.default.number,
  min: _propTypes.default.number,
  disabled: _propTypes.default.bool,
  onChange: _propTypes.default.func,

  /** Slider will pass its value to tipFormatter, display its value in Tooltip, and hide Tooltip when return value is null. */
  tipFormatter: _propTypes.default.func,

  /** Same as tipFormatter, but for the min and max labels. */
  minMaxFormatter: _propTypes.default.func,

  /** It receives a Number to display a slider or an Object with from and to properties to display a range. Example: `value={10}` or `value={{ from: 20, to: 40 }}` */
  value: _valueValidator.default
};
var _default = Slider;
exports.default = _default;