"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _Colors = _interopRequireDefault(require("../Colors"));

var _Tab = _interopRequireDefault(require("./Tab"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var getColors = function getColors(skin) {
  var skins = {
    default: {
      activeText: _Colors.default.BLUE[500],
      background: 'transparent',
      hoverBackground: _Colors.default.BLUE[200],
      text: 'inherit'
    },
    blue: {
      activeText: _Colors.default.WHITE,
      background: _Colors.default.BLUE[500],
      hoverBackground: _Colors.default.COBALT[500],
      text: _Colors.default.WHITE
    }
  };
  return skins[skin] || skins.default;
};

var Navbar = _styledComponents.default.nav.attrs({
  role: 'tablist'
}).withConfig({
  displayName: "TabbedView__Navbar",
  componentId: "sc-131sgnr-0"
})(["display:flex;flex-grow:1;flex-shrink:1;margin:0 0 25px 0;padding:0;"]);

Navbar.displayName = 'Navbar';

var NavItem = _styledComponents.default.button.attrs({
  role: 'tab'
}).withConfig({
  displayName: "TabbedView__NavItem",
  componentId: "sc-131sgnr-1"
})(["border:none;box-sizing:border-box;cursor:pointer;flex-shrink:0;font-size:20px;height:48px;line-height:1.5;min-width:90px;outline:none;overflow:hidden;padding:9px 16px;transition:all 0.2s ease-in-out;text-align:center;text-transform:uppercase;", ""], function (_ref) {
  var skin = _ref.skin;

  var _getColors = getColors(skin),
      background = _getColors.background,
      text = _getColors.text,
      activeText = _getColors.activeText,
      hoverBackground = _getColors.hoverBackground;

  return (0, _styledComponents.css)(["background-color:", ";color:", ";&[aria-selected='true']{border-bottom:4px solid ", ";color:", ";cursor:default;font-weight:bold;}&:hover{background-color:", ";}"], background, text, activeText, activeText, hoverBackground);
});

NavItem.displayName = 'NavItem';

var RenderIf = function RenderIf(_ref2) {
  var conditional = _ref2.conditional,
      children = _ref2.children;
  return conditional && children;
};

var TabbedView =
/*#__PURE__*/
function (_React$Component) {
  _inherits(TabbedView, _React$Component);

  function TabbedView(props) {
    var _this;

    _classCallCheck(this, TabbedView);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TabbedView).call(this, props));

    _this.onTabClick = function (tab) {
      _this.setState({
        activeTab: tab
      });
    };

    _this.sanitize = function (str) {
      return str.normalize('NFD').replace(/[\u0300-\u036f]/g, '').replace(' ', '-').toLowerCase();
    };

    var children = props.children,
        activeTab = props.activeTab;

    if (activeTab) {
      _this.state = {
        activeTab: activeTab
      };
    } else {
      var _React$Children$toArr = _react.default.Children.toArray(children),
          _React$Children$toArr2 = _slicedToArray(_React$Children$toArr, 1),
          title = _React$Children$toArr2[0].props.title;

      _this.state = {
        activeTab: title
      };
    }

    return _this;
  }

  _createClass(TabbedView, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          children = _this$props.children,
          skin = _this$props.skin;
      var activeTab = this.state.activeTab;
      return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(Navbar, null, _react.default.Children.map(children, function (_ref3) {
        var title = _ref3.props.title;
        return _react.default.createElement(NavItem, {
          key: title,
          onClick: function onClick() {
            return _this2.onTabClick(title);
          },
          skin: skin,
          id: "".concat(_this2.sanitize(title), "-tab"),
          "aria-controls": "".concat(_this2.sanitize(title), "-panel"),
          "aria-selected": title === activeTab
        }, title);
      })), _react.default.Children.map(children, function (_ref4) {
        var _ref4$props = _ref4.props,
            title = _ref4$props.title,
            tabContent = _ref4$props.children;
        return _react.default.createElement(RenderIf, {
          conditional: title === activeTab
        }, _react.default.createElement("div", {
          role: "tabpanel",
          id: "".concat(_this2.sanitize(title), "-panel"),
          "aria-labelledby": "".concat(_this2.sanitize(title), "-tab")
        }, tabContent));
      }));
    }
  }]);

  return TabbedView;
}(_react.default.Component);

TabbedView.Tab = _Tab.default;
TabbedView.propTypes = {
  children: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.node), _propTypes.default.node]).isRequired,
  activeTab: _propTypes.default.string,
  skin: _propTypes.default.oneOf(['default', 'blue'])
};
TabbedView.defaultProps = {
  activeTab: undefined,
  skin: 'default'
};
TabbedView.displayName = 'TabbedView';
var _default = TabbedView;
exports.default = _default;